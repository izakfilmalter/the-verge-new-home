@function first($list)
    @return nth($list, 1)

@function last($list)
    @return nth($list, length($list))

@function map-set($map, $key, $value)
    // Create new map called $new, with given key and value

    // Merge $map and $new, and return it.
    $new: ($key: $value)

    // This will overwrite the conflicting keys in the old map
    // Credit @WeWeDe
    @return map-merge($map, $new)

@function list-has-value($list, $value)
    // Set $found to false
    $found: false

    // Set $index to be blank
    $index: ''

    // Set position to 1
    $position: 1

    // $length of $list
    $length: length($list)

    @debug $length length function

    @debug $list list function

    // While loop to search for $value in $list
    @while $position <= $length

        @if nth($list, $position) == $value
            // Check if item in $list at $position is $value

            // If found make $found true
            $found: true

            // If found record $position to $index
            $index: $position

            // Set $position length of $list to exit @while loop.
            $position: length($list) + 1

        // Set $position to one less so we loop back.
        $position: $position + 1

    @debug $found is found

    @if $found
        // If found return $index
        @return $index

    @else
        // If not found return $found
        @return $found

=modern-map($value, $property)
    // Grab the selector
    $selector: &

    // Grab the $list key from the $properties map
    $list: map-get($properties, $property)

    // Get $length of $list
    $length: length($list)

    // Give value to $n
    $n: 1

    // Set $found to 0
    $found: ''

    @if $debug
        // Checking if debug is on.

        // Output name of $selector
        @debug #{$selector}

        // Output $value sent to mixin
        @debug $value value

        // Outputing $list
        @debug $list list

        // Output $length of $list
        @debug $length length

    // Search $list for $value
    @while $n <= $length
        // Have to double loop to find because list in $list

        // Set $list-values to the $n index in $list
        $list-values: nth($list, $n)

        @if list-has-value($list-values, $value)
            // Check if $list-values has $value based on list-has-value function

            // Set $found to $index
            $found: (list-has-value($list-values, $value) + ($n - 1))

            // Set's $n to $length to exit loop.
            $n: $length + 1

        // Add one to $n to loop back.
        $n: $n +1

    @debug $found index/found

    @if $found != ''
        // Checks if $found has a value

        // List already has selector(s)

        // Set $list-value to the value list within $list
        $list-value: nth($list, $found)

        @if $debug
            @debug $list list pre value

            @debug $found list pre index

            @debug $list-value index

        // This one is complicated. Has to be in same line so that list in list get's preserved.
        // The $list-value has an index of 2. Index 1 is the property value, e.g. #fff.
        // Index 2 is the comma seperated list of selectors for that propety: value combo.
        // Append will add out selector to the second index within $list-value and sepperate it
        // with a comma. $list value now has a new class added to it's list in index 2.
        $list-value: set-nth(($list-value), 2, (append(nth($list-value, 2), #{$selector}, comma)))

        @if $debug
            @debug $list-value new list value

        // Replaces $found with new selectors
        $list: set-nth($list, $found, $list-value)

        @if $debug
            @debug $list if selector(s)

    @else
        // If not found within $list

        @if $length == 0
            // Check if $list is 1 $value

            // Remake list with ($value, $selector)
            $list: ($value, (#{$selector}))

            @if $debug
                @debug $list if has value 1

        @else
            // Adds new $value and #selector par to $list
            $list: ($list, ($value, (#{$selector})))

            @if $debug
                @debug $list if false

    // Overrides $properties globaly with new values for $list
    $properties: map-set($properties, $property, $list) !global

    @if $debug
        @debug $properties post

